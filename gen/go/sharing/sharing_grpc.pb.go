// proto/sharing/sharing.proto

// Версия ProtoBuf

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sharing/sharing.proto

// Текущий пакет - указывает пространство имен для сервиса и сообщений. Помогает избегать конфликтов имен.

package sharingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sharing_Puller_FullMethodName   = "/sharing.Sharing/Puller"
	Sharing_Resulter_FullMethodName = "/sharing.Sharing/Resulter"
)

// SharingClient is the client API for Sharing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sharing is service for managing tasks.
type SharingClient interface {
	// Puller pull task
	Puller(ctx context.Context, in *PullerRequest, opts ...grpc.CallOption) (*PullerResponce, error)
	// Resulter save result
	Resulter(ctx context.Context, in *ResulterRequest, opts ...grpc.CallOption) (*ResulterResponce, error)
}

type sharingClient struct {
	cc grpc.ClientConnInterface
}

func NewSharingClient(cc grpc.ClientConnInterface) SharingClient {
	return &sharingClient{cc}
}

func (c *sharingClient) Puller(ctx context.Context, in *PullerRequest, opts ...grpc.CallOption) (*PullerResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullerResponce)
	err := c.cc.Invoke(ctx, Sharing_Puller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharingClient) Resulter(ctx context.Context, in *ResulterRequest, opts ...grpc.CallOption) (*ResulterResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResulterResponce)
	err := c.cc.Invoke(ctx, Sharing_Resulter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharingServer is the server API for Sharing service.
// All implementations must embed UnimplementedSharingServer
// for forward compatibility.
//
// Sharing is service for managing tasks.
type SharingServer interface {
	// Puller pull task
	Puller(context.Context, *PullerRequest) (*PullerResponce, error)
	// Resulter save result
	Resulter(context.Context, *ResulterRequest) (*ResulterResponce, error)
	mustEmbedUnimplementedSharingServer()
}

// UnimplementedSharingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSharingServer struct{}

func (UnimplementedSharingServer) Puller(context.Context, *PullerRequest) (*PullerResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Puller not implemented")
}
func (UnimplementedSharingServer) Resulter(context.Context, *ResulterRequest) (*ResulterResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resulter not implemented")
}
func (UnimplementedSharingServer) mustEmbedUnimplementedSharingServer() {}
func (UnimplementedSharingServer) testEmbeddedByValue()                 {}

// UnsafeSharingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharingServer will
// result in compilation errors.
type UnsafeSharingServer interface {
	mustEmbedUnimplementedSharingServer()
}

func RegisterSharingServer(s grpc.ServiceRegistrar, srv SharingServer) {
	// If the following call pancis, it indicates UnimplementedSharingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sharing_ServiceDesc, srv)
}

func _Sharing_Puller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServer).Puller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sharing_Puller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServer).Puller(ctx, req.(*PullerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sharing_Resulter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResulterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharingServer).Resulter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sharing_Resulter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharingServer).Resulter(ctx, req.(*ResulterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sharing_ServiceDesc is the grpc.ServiceDesc for Sharing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sharing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sharing.Sharing",
	HandlerType: (*SharingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Puller",
			Handler:    _Sharing_Puller_Handler,
		},
		{
			MethodName: "Resulter",
			Handler:    _Sharing_Resulter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sharing/sharing.proto",
}
